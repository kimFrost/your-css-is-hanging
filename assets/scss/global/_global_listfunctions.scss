
/* Global List Functions */

@function prepend($list, $value) {
	@return join($value, $list);
}

@function remove($list, $value, $recursive: false) {
	$result: ();
	@for $i from 1 through length($list) {
		@if type-of(nth($list, $i)) == list and $recursive {
			$result: append($result, remove(nth($list, $i), $value, $recursive));
		}
		@else if nth($list, $i) != $value {
			$result: append($result, nth($list, $i));
		}
	}
	@return $result;
}

@function remove-nth($list, $index) {
	$result: null;
	@if type-of($index) != number {
		@warn "$index: #{quote($index)} is not a number for `remove-nth`.";
	}
	@else if $index == 0 {
		@warn "List index 0 must be a non-zero integer for `remove-nth`.";
	}
	@else if abs($index) > length($list) {
		@warn "List index is #{$index} but list is only #{length($list)} item long for `remove-nth`.";
	}
	@else {
		$result: ();
		$index: if($index < 0, length($list) + $index + 1, $index);
		@for $i from 1 through length($list) {
			@if $i != $index {
				$result: append($result, nth($list, $i));
			}
		}
	}
	@return $result;
}

@function slice($list, $start: 1, $end: length($list)) {
	$result: null;
	@if type-of($start) != number or type-of($end) != number {
		@warn "Either $start or $end are not a number for `slice`.";
	}
	@else if $start > $end {
		@warn "The start index has to be lesser than or equals to the end index for `slice`.";
	}
	@else if $start < 1 or $end < 1 {
		@warn "List indexes must be non-zero integers for `slice`.";
	}
	@else if $start > length($list) {
		@warn "List index is #{$start} but list is only #{length($list)} item long for `slice`.";
	}
	@else if $end > length($list) {
		@warn "List index is #{$end} but list is only #{length($list)} item long for `slice`.";
	}
	@else {
		$result: ();

		@for $i from $start through $end {
			$result: append($result, nth($list, $i));
		}
	}
	@return $result;
}

@function reverseList($list, $recursive: false) {
	$result:();
	@for $i from length($list)*-1 through -1 {
		@if type-of(nth($list, abs($i))) == list and $recursive {
			$result: append($result, reverseList(nth($list, abs($i)), $recursive));
		}
		@else {
			$result: append($result, nth($list, abs($i)));
		}
	}
	@return $result;
}

@function last-index($list, $value) {
	@for $i from length($list)*-1 through -1 {
		@if nth($list, abs($i)) == $value {
			@return abs($i);
		}
	}
	@return null;
}